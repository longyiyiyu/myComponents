var fs = require('fs'),
    CWD = process.cwd(),
    TEST_CONF_FILE_NAME = 'test-conf.json';

//hack fis.util.read
//var readCache = {};
//function hack(origin) {
//    return function(path, convert) {
//        if (path in readCache) { console.log('hack read find:', path); return readCache[path]; }
//        return origin.apply(this, arguments);
//    }
//}
//fis.util.read = hack(fis.util.read);

function buildCnt(opt) {
    var opt = fis.util.merge({
        comName: 'test',
        mainCss: '',
        testCss: '',
        mainHtml: '',
        testHtml: '',
        mainJs: '',
        testJs: ''
    }, opt);
    return '\
        <html>\
            <head>\
                <meta charset="utf8" />\
                <title>'+'test for '+opt.comName+'</title>\
                <link rel="stylesheet" href="/common/reset.css?__inline" />\
                <link rel="stylesheet" href="/common/common.css?__inline" />\
                <style>'+opt.mainCss+'</style>\
                <style>'+opt.testCss+'</style>\
            </head>\
            <body id="global">\
                <h1>'+'test for '+opt.comName+'</h1>\
                <div class="main-html-box">'+opt.mainHtml+'</div>\
                <div class="test-html-box">'+opt.testHtml+'</div>\
                <script src="/lib/mod.js?__inline"></script>\
                <script>'+opt.mainJs+'</script>\
                <script>'+opt.testJs+'</script>\
                <script>\
                </script>\
            </body>\
        </html>';
}

function calcDeps(ret, dir, name) {
    var cssDeps = {}, jsDeps = {}, htmlDeps = {}, queue = [];
    var tmpStr, curId, curFile;

    //取comName.html
    tmpStr = dir+'/'+name+'/'+name+'.html';
    if (fis.util.exists(tmpStr)) {
        curFile = fis.file(tmpStr);
//        console.log('abc:', curFile.getContent());
        htmlDeps[tmpStr] = curFile;
    }

    //初始化：取comName.js, comName.scss
    if (name in ret.ids) queue.push(name);
    //有comName.js必定会依赖comName.scss(如果有的话)，但那种纯ui就没有comName.js，所以还是需要手动添加
    tmpStr = name+'/'+name+'.scss';
    if (tmpStr in ret.ids) queue.push(tmpStr);

    while(queue.length) {
        curId = queue.pop();
        if(!ret.ids[curId]){
            fis.log.notice(curId + ' is not exists!');
            continue;
        }
        curFile = ret.ids[curId];
        if(curFile.isCssLike){
            cssDeps[curId] = curFile;
            continue;
        }
        if(!curFile.isJsLike){
            continue;
        }
        jsDeps[curId] = curFile;
        if(curFile.requires && curFile.requires.length){
            curFile.requires.forEach(function(depId){
                if(depId != curId && !jsDeps[depId] && !cssDeps[depId]){
                    queue.unshift(depId);
                }
            })
        }
    }

    return {
        htmlDeps: htmlDeps,
        cssDeps: cssDeps,
        jsDeps: jsDeps
    };
}

function getCntOpt(deps) {
    var k, html = '', css = '', js = '';
    for (k in deps.htmlDeps) {
        html += deps.htmlDeps[k].getContent();
    }
    for (k in deps.cssDeps) {
        css += deps.cssDeps[k].getContent();
    }
    for (k in deps.jsDeps) {
        js += deps.jsDeps[k].getContent();
    }

    return {
        html: html,
        css: css,
        js: js
    };
}

function getTestCntOpt(dir, name) {
    var tmpStr, curFile, conf;

    //取comName.html
    tmpStr = dir+'/'+name+'/'+TEST_CONF_FILE_NAME;
    if (fis.util.exists(tmpStr)) {
        curFile = fis.file(tmpStr);
        conf = JSON.parse(curFile.getContent());
    }

    return conf;
}

module.exports = function (ret, conf, settings, opt) {
//    console.log('build:', opt.dest);
//    console.log('build');

    var root = fis.project.getProjectPath(),
        comDirPath = root + '/components',
        distComDirPath = fis.util([CWD, fis.config.get('deploy.'+opt.dest+'.to', '../dist'), 'components'].join('/'));
    var stat = fs.statSync(comDirPath);
    //console.log(root, comPath, stat, fs.readdirSync(comPath));
    if (stat.isDirectory()) {
        fs.readdirSync(comDirPath).forEach(function(comName) {
            var filePath = [comDirPath, comName, 'test.html'].join('/'),
                distFilePath = [distComDirPath, comName, 'test.html'].join('/'),
                cnt;

            var deps = calcDeps(ret, comDirPath, comName),
                buildCntOpt = getCntOpt(deps),
                testCntOpt = getTestCntOpt(comDirPath, comName);

            cnt = buildCnt({
                comName: comName,
                mainJs: buildCntOpt.js,
                mainCss: buildCntOpt.css,
                mainHtml: buildCntOpt.html,
                testJs: testCntOpt && testCntOpt.js || '',
                testHtml: testCntOpt && testCntOpt.html || '',
                testCss: testCntOpt && testCntOpt.css || ''
            });

//            readCache[filePath] = cnt;
            var file = fis.file(filePath);
            file.setContent(cnt);
            fis.compile(file);
            fis.util.write(distFilePath, file.getContent());
        });
    }
};